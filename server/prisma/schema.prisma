// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model Article {
  id           String   @id @default(uuid())
  title        String
  source       String
  publishedAt  DateTime
  summary      String
  labels       String[]
  thumbnailUrl String?
  articleUrl   String   @unique
  fullText     String?
  category     String?
  subCategory  String?
  viewCount    Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // リレーション
  topicsArticles    TopicsArticle[]
  researchArticles  ResearchArticle[]
}

model Category {
  id                      String            @id @default(uuid())
  name                    String            @unique
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  
  // リレーション
  topicsArticles          TopicsArticle[]   @relation("MainCategory")
  topicsArticlesSubcat    TopicsArticle[]   @relation("SubCategory")
  researchArticles        ResearchArticle[]
}

model Topic {
  id                String            @id @default(uuid())
  title             String
  summary           String?           @db.Text
  publishDate       DateTime?
  content           String?           @db.Text
  viewCount         Int               @default(0)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  // リレーション
  topicsArticles    TopicsArticle[]
}

model TopicsArticle {
  id            String   @id @default(uuid())
  topicId       String
  articleId     String
  categoryId    String?
  subCategoryId String?
  createdAt     DateTime @default(now())
  
  // リレーション
  topic       Topic     @relation(fields: [topicId], references: [id], onDelete: Cascade)
  article     Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  category    Category? @relation("MainCategory", fields: [categoryId], references: [id])
  subCategory Category? @relation("SubCategory", fields: [subCategoryId], references: [id])
  
  @@unique([topicId, articleId])
}

model Research {
  id           String   @id @default(uuid())
  title        String
  summary      String   @db.Text
  content      String?  @db.Text
  publishDate  DateTime
  videoUrl     String?
  posterUrl    String?
  pdfUrl       String?
  speaker      String?
  department   String?
  agenda       String[]
  viewCount    Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // リレーション
  researchArticles ResearchArticle[]
}

model ResearchArticle {
  id         String   @id @default(uuid())
  researchId String
  articleId  String
  categoryId String?
  createdAt  DateTime @default(now())
  
  // リレーション
  research   Research  @relation(fields: [researchId], references: [id], onDelete: Cascade)
  article    Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  category   Category? @relation(fields: [categoryId], references: [id])
  
  @@unique([researchId, articleId])
}

model Schedule {
  id             String   @id @default(uuid())
  name           String
  description    String?
  scheduleType   String   // "daily", "weekly", "monthly", "custom"
  cronExpression String?  // Cron式（カスタムスケジュール用）
  time           String?  // HH:MM形式
  dayOfWeek      Int?     // 0-6 (日曜日=0)
  dayOfMonth     Int?     // 1-31
  taskType       String   // "rss_collection", "labeling", "summarization", "categorization", "batch_process"
  taskConfig     Json     // タスク設定（JSON形式）
  isActive       Boolean  @default(true)
  lastRun        DateTime?
  nextRun        DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // リレーション
  executions     ScheduleExecution[]
}

model ScheduleExecution {
  id          String   @id @default(uuid())
  scheduleId  String
  status      String   // "pending", "running", "completed", "failed"
  startedAt   DateTime @default(now())
  completedAt DateTime?
  result      Json?    // 実行結果（JSON形式）
  errorMessage String?
  createdAt   DateTime @default(now())
  
  // リレーション
  schedule    Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
}
